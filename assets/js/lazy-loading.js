function initializeLazyLoading(){if(!("IntersectionObserver"in window))return void loadAllImages();const e=new IntersectionObserver((e,t)=>{e.forEach(e=>{if(e.isIntersecting){const a=e.target;loadImage(a),t.unobserve(a)}})},{rootMargin:"50px 0px",threshold:.1});document.querySelectorAll("img[data-src]").forEach(t=>e.observe(t))}function loadImage(e){const t=e.getAttribute("data-src");if(!t)return;const a=new Image;a.onload=function(){e.src=t,e.classList.remove("lazy"),e.classList.add("loaded"),e.dispatchEvent(new CustomEvent("imageLoaded",{detail:{img:e,src:t}}))},a.onerror=function(){e.classList.add("lazy-error"),console.warn("Failed to load image:",t)},a.src=t,e.removeAttribute("data-src")}function loadAllImages(){document.querySelectorAll("img[data-src]").forEach(e=>{const t=e.getAttribute("data-src");t&&(e.src=t,e.classList.remove("lazy"))})}function lazyLoadImage(e,t,a=""){if(!e)return;e.classList.add("lazy"),e.setAttribute("data-src",t),a&&e.setAttribute("alt",a);const o=new IntersectionObserver(t=>{t.forEach(t=>{t.isIntersecting&&(loadImage(e),o.unobserve(e))})},{rootMargin:"50px 0px",threshold:.1});o.observe(e)}function loadProgressiveImage(e,t,a){if(!e)return;e.src=t,e.classList.add("progressive");const o=new Image;o.onload=function(){e.src=a,e.classList.remove("progressive"),e.classList.add("progressive-loaded")},o.src=a}document.addEventListener("DOMContentLoaded",function(){initializeLazyLoading()}),window.LazyLoading={initialize:initializeLazyLoading,loadImage:lazyLoadImage,loadProgressive:loadProgressiveImage};